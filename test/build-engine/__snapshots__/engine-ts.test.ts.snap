// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test base 1`] = `
{
  "__virtual__/CCBUILD_HELPER_MODULE.ts": {
    "code": "/**
 * TsPropertyDecorator cannot access the property descriptor, sometimes we need to access the initializer in property descriptor.
 * This helper helps receive the initializer from EngineCompiler, and generate a BabelPropertyDecorator in runtime.
 * @param decoratorOrFactory A TsPropertyDecorator or a decorator factory
 * @param initializer the property initializer generate from engine compiler
 * @param factoryArgs if \`decoratorOrFactory\` is a factory, then we may need some arguments for this factory method.
 * @returns BabelPropertyDecorator
 */
export function CCBuildTsFieldDecoratorHelper(decoratorOrFactory: Function, initializer: Function, ...factoryArgs: any[]): PropertyDecorator {
  if (factoryArgs.length > 0) {
    const decorator = decoratorOrFactory(...factoryArgs);
    return (target, propertyKey) => {
      decorator(target, propertyKey, initializer);
    };
  } else {
    return (target, propertyKey) => {
      decoratorOrFactory(target, propertyKey, initializer);
    };
  }
}",
  },
  "__virtual__/internal_constants.ts": {
    "code": "function tryDefineGlobal(name, value) {
  const _global = typeof window === 'undefined' ? global : window;
  if (typeof _global[name] === 'undefined') {
    return _global[name] = value;
  } else {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return _global[name];
  }
}
export const HTML5 = false;
export const NATIVE = true;
export const WECHAT = false;
tryDefineGlobal('CC_WECHAT', false);
export const BAIDU = false;
tryDefineGlobal('CC_BAIDU', false);
export const XIAOMI = false;
tryDefineGlobal('CC_XIAOMI', false);
export const ALIPAY = false;
tryDefineGlobal('CC_ALIPAY', false);
export const TAOBAO = false;
export const BYTEDANCE = false;
tryDefineGlobal('CC_BYTEDANCE', false);
export const OPPO = false;
tryDefineGlobal('CC_OPPO', false);
export const VIVO = false;
tryDefineGlobal('CC_VIVO', false);
export const HUAWEI = false;
tryDefineGlobal('CC_HUAWEI', false);
export const COCOSPLAY = false;
tryDefineGlobal('CC_COCOSPLAY', false);
export const QTT = false;
tryDefineGlobal('CC_QTT', false);
export const LINKSURE = false;
tryDefineGlobal('CC_LINKSURE', false);
export const EDITOR = false;
tryDefineGlobal('CC_EDITOR', false);
export const PREVIEW = false;
tryDefineGlobal('CC_PREVIEW', false);
export const BUILD = true;
tryDefineGlobal('CC_BUILD', true);
export const TEST = false;
tryDefineGlobal('CC_TEST', false);
export const DEBUG = true;
tryDefineGlobal('CC_DEBUG', true);
export const SERVER_MODE = false;
export const DEV = false;
tryDefineGlobal('CC_DEV', false);
export const MINIGAME = false;
tryDefineGlobal('CC_MINIGAME', false);
export const RUNTIME_BASED = false;
tryDefineGlobal('CC_RUNTIME_BASED', false);
export const SUPPORT_JIT = true;
tryDefineGlobal('CC_SUPPORT_JIT', true);
export const JSB = true;
tryDefineGlobal('CC_JSB', true);
export const NOT_PACK_PHYSX_LIBS = false;
export const NET_MODE = 0;
export const WEBGPU = false;",
  },
  "animation/animation.ts": {
    "code": "export class Animation {
  play() {}
}",
  },
  "animation/index.ts": {
    "code": "export * from './animation';",
  },
  "audio/as-type.ts": {
    "code": "const a = 1;
const b = 2;
// this is a bug in babel
const c = ((a as unknown as number) & b) as unknown as number;
const d = (a & b) as unknown as number;",
  },
  "audio/dynamic-import.ts": {
    "code": "window.__cc_module_context__.import('./player');",
  },
  "audio/index.ts": {
    "code": "import debugInfo from '../debug-info';
export * from './player';",
  },
  "audio/internal-native.ts": {
    "code": "// @ts-ignore
console.log('internal-native');",
  },
  "audio/module.native.ts": {
    "code": "// @ts-ignore
console.log('module that after override');",
  },
  "audio/player.ts": {
    "code": "import "./internal-native";
import { EDITOR, TEST } from "../__virtual__/internal_constants";
import "./module.native";
import "../pal/audio/native";
import "../pal/minigame/native";
import { testDecorator } from "../decorators";
import { testDecorator as testDecorator2 } from "../decorators";
import { zlib } from '../external/zlib';
import { zlib as zlib2 } from '../external/zlib.js';
import './struct';
import './template-string-type';
import './dynamic-import';
import './as-type';
// @ts-ignore
console.log(zlib.Inflate);
// @ts-ignore
console.log(zlib2.Inflate);
@testDecorator
export class Player {
  @testDecorator
  play(): Promise<void> {
    if (EDITOR) {
      // @ts-ignore
      console.log('this is editor');
    } else if (TEST) {
      // @ts-ignore
      console.log('this is test');
    }
    return new Promise(resolve => resolve());
  }
}
export const player: Player = new Player();
player.play().then(() => {
  // @ts-ignore
  console.log('test log');
});
export const testConsoleLog = {
  test: (): void => {
    // @ts-ignore
    console.warn('test console log');
  },
  test2: (): void => // @ts-ignore
  console.warn('test console log'),
  test3: (): number => 1
};",
  },
  "audio/struct.ts": {
    "code": "function test1(structAlias: Object) {
  const a = {
    struct: structAlias
  };
  // @ts-ignore
  console.warn(a.struct);
}
function test2(a: number, structAlias: Object) {
  const b = {
    struct: structAlias
  };
  const c = {
    struct: structAlias
  };
  const d = {
    struct: 1
  };
  const e = {
    struct: () => {}
  };
  // @ts-ignore
  console.warn(b.struct);
}
function test3() {
  const structAlias = {
    test() {},
    test2: 1
  };
  structAlias.test();
  // @ts-ignore
  console.error(structAlias.test2);
}
function test4(test: {
  struct: number;
}) {
  const {
    struct: structAlias
  } = test;
  const test2 = {
    struct: structAlias
  };
}
interface ITest {
  struct: number;
}
function test5({
  struct: structAlias
}: ITest) {
  const test = {
    struct: structAlias
  };
}
class Mesh {
  get struct() {
    return 1;
  }
  set struct(v) {}
}
class Mesh2 {
  public struct: number = 1;
}
class Mesh3 {
  public struct() {}
}
class Mesh4 {
  private static struct = 1;
}
class Mesh5 {
  private test(structAlias: number) {}
}
function test6(mesh2?: Mesh2, mesh3?: Mesh3) {
  mesh2!.struct;
  mesh3?.struct();
}",
  },
  "audio/template-string-type.ts": {
    "code": "const DELIMITER = '$_$';
const POSTFIX_TYPE: string = \`\${DELIMITER}type\`;
const POSTFIX_EDITOR_ONLY: string = \`\${DELIMITER}editorOnly\`;
const POSTFIX_DEFAULT: string = \`\${DELIMITER}default\`;
const POSTFIX_FORMERLY_SERIALIZED_AS: string = \`\${DELIMITER}formerlySerializedAs\`;",
  },
  "debug-info.ts": {
    "code": "export default {
  "1006": "[Action step]. override me",
  "1007": "[Action update]. override me",
  "1008": "[Action reverse]. override me",
  "1100": "Expected 'data' dict, but not found. Config file: %s",
  "1101": "Please load the resource first : %s",
  "1200": "cocos2d: Director: Error in gettimeofday"
};",
  },
  "decorators.ts": {
    "code": "export function testDecorator() {}",
  },
  "exports/animation.ts": {
    "code": "export * from '../animation';",
  },
  "exports/audio.ts": {
    "code": "export * from '../audio';
export * from '../misc';",
  },
  "external/zlib.d.ts": {
    "code": "declare namespace zlib {
  export function Inflate(data: any, info?: any): void;
}
export { zlib };",
  },
  "external/zlib.js": {
    "code": "export const zlib = {
  Inflate() {}
};",
  },
  "misc/decorator.ts": {
    "code": "import { CCBuildTsFieldDecoratorHelper as _CCBuildTsFieldDecoratorHelper } from "../__virtual__/CCBUILD_HELPER_MODULE";
const classDec: ClassDecorator = function (target) {};
const propDec1: PropertyDecorator = function (target, propertyKey) {};
const propDec2: PropertyDecorator = function (target, propertyKey) {};
function propDecFactory(name: string, ...args: any) {
  return (function (target, propertyKey) {} as PropertyDecorator);
}
@classDec
class A {
  @_CCBuildTsFieldDecoratorHelper(propDec1, () => 1)
  public test1 = 1;
  @_CCBuildTsFieldDecoratorHelper(propDec1, () => 2)
  @_CCBuildTsFieldDecoratorHelper(propDec2, () => 2)
  public test2 = 2;
  @_CCBuildTsFieldDecoratorHelper(propDecFactory, () => 3, 'test')
  public test3 = 3;
  @_CCBuildTsFieldDecoratorHelper(propDec1, () => 4)
  @_CCBuildTsFieldDecoratorHelper(propDecFactory, () => 4, 'test', 1, 2, () => {})
  public test4 = 4;
  @_CCBuildTsFieldDecoratorHelper(propDec1, null)
  public test5;
}",
  },
  "misc/index.ts": {
    "code": "import './decorator';
import { RectAlias } from './rect';
import { PathAlias } from './path';
let p: PathAlias = new PathAlias();
const r: RectAlias = RectAlias.from(0, 0, 100, 100);
interface Test {
  r: RectAlias;
  p: PathAlias;
  test(r: RectAlias, p: PathAlias): RectAlias;
}
// @ts-ignore
console.log(p, r);
export * from './rect';
export * from './path';",
  },
  "misc/path.ts": {
    "code": "class PathAlias {}
export { PathAlias };",
  },
  "misc/rect.ts": {
    "code": "export class RectAlias {
  public static from(x: number, y: number, width: number, height: number): RectAlias {
    throw 'not implemented';
  }
}",
  },
  "pal/audio/native.ts": {
    "code": "// @ts-ignore
console.log('native audio');",
  },
  "pal/minigame/native.ts": {
    "code": "// @ts-ignore
console.log('native');",
  },
}
`;
